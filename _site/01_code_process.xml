<p>The automated link checker is built using several Python modules and libraries. Here is an outline of the flow and key components:</p>
<p><strong>Input Processing and URL Checking</strong></p>
<p>Input and Caching:</p>
<p>The main script (see <code>__init__.py</code> ​) reads URLs from an input CSV file containing bibliographic records, the domain, URL, and a location identifier. A caching dictionary (url_list) is used to avoid re-checking duplicate URLs.</p>
<p>Multiple Verification Methods:</p>
<p>Two different methods validate the URLs:</p>
<ul>
<li><p>Requests-based Check: Uses the Python requests library to send a HEAD request. (See <code>url_status.py</code>)</p></li>
<li><p>Selenium-based Check: In case of non-successful responses or exceptions from Requests, the system falls back to Selenium. This approach bypasses bot-detection and allows JavaScript to load, ensuring that the page’s final state is accurately determined.</p></li>
</ul>
<p><strong>Error Handling and Fallbacks:</strong></p>
<p>The function select_code_and_error intelligently decides which method’s result to store. If both methods encounter issues, the error messages are captured and stored as a JSON string so that both the request and Selenium outputs are recorded.</p>
<p><strong>Data Recording and Duplication Avoidance</strong></p>
<p>Database and CSV Output:</p>
<p>The system uses an SQLite database (configured via SQLAlchemy) to store verification results. Each check record is saved in the bib_url_status_report table with columns for bibliographic ID, URL, domain, status code, error details, unit, and the date/time of the check. Additionally, results are recorded in a CSV file for legacy use. (Refer to database.py ​and models.py ​for details.)</p>
<p><strong>Selenium and Driver Configuration</strong></p>
<p>Driver Setup:</p>
<p>The Selenium driver is configured in driver.py ​. Options include headless operation (optionally disabled to view the browser) and logging preferences are set for troubleshooting and performance analysis.</p>
<p>Page Ready and Network Logs:</p>
<p>The Selenium method uses JavaScript execution to check the document’s ready state and extract a status code from browser logs. If the expected state isn’t reached within a timeout, a custom exception is raised (see <code>exception.py</code>).</p>
<p><strong>Error Recording and Notification</strong></p>
<p>Error Capturing: Any errors encountered during URL processing (e.g., timeouts, status code not found, connection issues) are captured and logged using the record_error function in errors.py ​. This ensures that all anomalies are recorded along with the URL’s metadata.</p>
<p><strong>Email Notifications</strong></p>
<p>The module <code>notifications.py</code></p>
<p>provides functions to format and send email notifications to unit contacts. An email report (as exemplified in email_report_msu_manager.pdf) contains a summary of error counts by type, making it actionable for librarians and unit managers.</p>
<div id="3ade8a4a-fb1d-4a6c-8409-ac45482d5fc9" class="hidden">

</div>
